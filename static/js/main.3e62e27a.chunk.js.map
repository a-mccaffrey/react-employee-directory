{"version":3,"sources":["components/Header/index.js","components/DataTable/index.js","components/SearchForm/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","DataTable","props","sortEmail","setState","prevState","sortedRows","sortBy","rows","console","log","sortName","sortPhone","sortDOB","state","loading","fetch","then","response","json","results","this","cellPadding","cellSpacing","onClick","map","row","key","phone","src","picture","medium","alt","name","first","last","email","dob","date","Component","SearchForm","App","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"oQAYeA,MATf,WACE,OACE,4BAAQC,UAAU,wBAChB,wBAAIA,UAAU,mBAAd,sBACA,uBAAGA,UAAU,wBAAb,sH,OCyGSC,E,kDA5Gb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAoBRC,UAAY,WACV,EAAKC,UAAS,SAACC,GACb,IAAMC,EAAaC,iBAAOF,EAAUG,KAAM,SAE1C,OADAC,QAAQC,IAAIJ,GACL,CAAEE,KAAMF,OAzBA,EA6BnBK,SAAW,WACT,EAAKP,UAAS,SAACC,GACb,IAAMC,EAAaC,iBAAOF,EAAUG,KAAM,cAE1C,OADAC,QAAQC,IAAIJ,GACL,CAAEE,KAAMF,OAjCA,EAqCnBM,UAAY,WACV,EAAKR,UAAS,SAACC,GACb,IAAMC,EAAaC,iBAAOF,EAAUG,KAAM,SAE1C,OADAC,QAAQC,IAAIJ,GACL,CAAEE,KAAMF,OAzCA,EA6CnBO,QAAU,WACR,EAAKT,UAAS,SAACC,GACb,IAAMC,EAAaC,iBAAOF,EAAUG,KAAM,YAE1C,OADAC,QAAQC,IAAIJ,GACL,CAAEE,KAAMF,OA/CjB,EAAKQ,MAAQ,CACXN,KAAM,GACNO,SAAS,GAJM,E,gEAQE,IAAD,OAClBC,MAAM,gDACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACC,GACL,EAAKd,SAAS,CACZI,KAAMU,EAASE,QACfL,SAAS,S,+BAyCP,IAAD,EACmBM,KAAKP,MAAvBN,EADD,EACCA,KACR,OAFO,EACOO,QAKV,6BACE,2BAAOf,UAAU,QAAQsB,YAAa,EAAGC,YAAa,GACpD,2BAAOvB,UAAU,cACf,4BACE,6BACA,4BACA,4BAAQA,UAAU,eAAewB,QAASH,KAAKV,UAA/C,SAEA,4BACA,4BAAQX,UAAU,eAAewB,QAASH,KAAKT,WAA/C,UAEA,4BACE,4BAAQZ,UAAU,eAAewB,QAASH,KAAKlB,WAA/C,UAEF,4BACA,4BAAQH,UAAU,eAAewB,QAASH,KAAKR,SAA/C,UAQJ,+BACGL,EAAKiB,KAAI,SAACC,GAAD,OACR,wBAAIC,IAAKD,EAAIE,OACX,4BACE,yBAAKC,IAAKH,EAAII,QAAQC,OAAQC,IAAKN,EAAIO,KAAKC,SAE9C,4BACGR,EAAIO,KAAKC,MADZ,IACoBR,EAAIO,KAAKE,MAE7B,4BAAKT,EAAIE,OACT,4BAAKF,EAAIU,OACT,4BAAKV,EAAIW,IAAIC,aArClB,+C,GA3DWC,a,MCqBTC,ICPAC,E,uKAVb,OACE,6BACE,kBAAC,EAAD,MAEA,kBAAC,EAAD,W,GANYC,IAAMH,WCOJI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtC,MAAK,SAAAuC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlD,QAAQkD,MAAMA,EAAMC,a","file":"static/js/main.3e62e27a.chunk.js","sourcesContent":["import React from \"react\";\n\n// Depending on the current path, this component sets the \"active\" class on the appropriate navigation link item\nfunction Header() {\n  return (\n    <header className=\"bg-light text-center\">\n      <h1 className=\"text-black py-5\">Employee Directory</h1>\n      <p className=\"text-black pb-5 mb-0\">Click on the headings to filter by category or use the search box (feature not built yet) to narrow your results</p>\n    </header>\n  );\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport { sortBy } from \"lodash\";\n\nclass DataTable extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rows: [],\n      loading: false,\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://randomuser.me/api/?results=60&noinfo\")\n      .then((response) => response.json())\n      .then((response) => {\n        this.setState({\n          rows: response.results,\n          loading: true,\n        });\n      });\n  }\n\n  //Ran out of time, sorry for the very undry code below\n\n  sortEmail = () => {\n    this.setState((prevState) => {\n      const sortedRows = sortBy(prevState.rows, \"email\")\n      console.log(sortedRows)\n      return { rows: sortedRows }\n    });\n  };\n\n  sortName = () => {\n    this.setState((prevState) => {\n      const sortedRows = sortBy(prevState.rows, \"name.first\")\n      console.log(sortedRows)\n      return { rows: sortedRows }\n    });\n  };\n\n  sortPhone = () => {\n    this.setState((prevState) => {\n      const sortedRows = sortBy(prevState.rows, \"phone\")\n      console.log(sortedRows)\n      return { rows: sortedRows }\n    });\n  };\n\n  sortDOB = () => {\n    this.setState((prevState) => {\n      const sortedRows = sortBy(prevState.rows, \"dob.date\")\n      console.log(sortedRows)\n      return { rows: sortedRows }\n    });\n  };\n\n  //Ending my undry code\n\n  render() {\n    const { rows, loading } = this.state;\n    if (!loading) {\n      return <div>Loading...</div>;\n    } else {\n      return (\n        <div>\n          <table className=\"table\" cellPadding={0} cellSpacing={0}>\n            <thead className=\"thead-dark\">\n              <tr>\n                <th></th>\n                <th>\n                <button className=\"btn btn-link\" onClick={this.sortName}>Name</button>\n                </th>\n                <th>\n                <button className=\"btn btn-link\" onClick={this.sortPhone}>Phone</button>\n                </th>\n                <th>\n                  <button className=\"btn btn-link\" onClick={this.sortEmail}>Email</button>\n                </th>\n                <th>\n                <button className=\"btn btn-link\" onClick={this.sortDOB}>DOB</button>\n                </th>\n                {/* <th><button onClick={() => this.props.sortBy('first')}>Name</button></th>\n                <th><button onClick={() => this.props.sortBy('phone')}>Phone</button></th>\n                <th><button onClick={() => this.props.sortBy('email')}>Email</button></th>\n                <th><button onClick={() => this.props.sortBy('date')}>DOB</button></th> */}\n              </tr>\n            </thead>\n            <tbody>\n              {rows.map((row) => (\n                <tr key={row.phone}>\n                  <td>\n                    <img src={row.picture.medium} alt={row.name.first} />\n                  </td>\n                  <td>\n                    {row.name.first} {row.name.last}\n                  </td>\n                  <td>{row.phone}</td>\n                  <td>{row.email}</td>\n                  <td>{row.dob.date}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n        // </EmployeeContext.Provider>\n      );\n    // }\n  }\n}\n}\n\nexport default DataTable;\n","import React from \"react\";\nimport \"./style.css\";\n\n// Using the datalist element we can create autofill suggestions based on the props.breeds array\nfunction SearchForm(props) {\n  return (\n    <form className=\"search\">\n      <div className=\"form-group\">\n        <label htmlFor=\"name\">Search Term:</label>\n        <input\n          value={props.search}\n          onChange={props.handleInputChange}\n          name=\"term\"\n          list=\"term\"\n          type=\"text\"\n          className=\"form-control\"\n          placeholder=\"Type in a name\"\n          id=\"term\"\n        />\n      </div>\n    </form>\n  );\n}\n\nexport default SearchForm;\n","import React from \"react\";\nimport Header from \"./components/Header\";\nimport DataTable from \"./components/DataTable\";\nimport SearchForm from \"./components/SearchForm\";\n\nclass App extends React.Component {\n  render() {\n  return (\n    <div>\n      <Header />\n      {/* <SearchForm /> */}\n      <DataTable />\n    </div>\n  );\n}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}